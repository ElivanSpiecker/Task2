name: Pipeline PHP com Flyway (Homolog + Produ√ß√£o)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  homolog:
    name: üîß Homologa√ß√£o
    runs-on: ubuntu-latest

    # exp√µe todos os secrets como env vars para o job e para o servi√ßo
    env:
      DB_NAME_HOMOLOG: ${{ secrets.DB_NAME_HOMOLOG }}
      DB_USER_HOMOLOG: ${{ secrets.DB_USER_HOMOLOG }}
      DB_PASS_HOMOLOG: ${{ secrets.DB_PASS_HOMOLOG }}
      DB_URL_HOMOLOG:  ${{ secrets.DB_URL_HOMOLOG }}
      SSH_HOST_HOMOLOG: ${{ secrets.SSH_HOST_HOMOLOG }}
      SSH_USER_HOMOLOG: ${{ secrets.SSH_USER_HOMOLOG }}
      SSH_PASS_HOMOLOG: ${{ secrets.SSH_PASS_HOMOLOG }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASS_HOMOLOG }}
          MYSQL_DATABASE:      ${{ env.DB_NAME_HOMOLOG }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -p${{ env.DB_PASS_HOMOLOG }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: üîÑ Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Instalar PHP, Composer e depend√™ncias
        run: |
          sudo apt update
          sudo apt install -y php php-mbstring php-xml php-mysql unzip sshpass default-jre
          curl -sS https://getcomposer.org/installer | php
          php composer.phar install

      - name: ‚òÅÔ∏è Cache do Composer
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}

      - name: ‚úÖ Garantir execu√ß√£o do PHPUnit
        run: chmod +x ./vendor/bin/phpunit

      - name: üìù Criar .env para testes
        run: |
          cat <<EOF > .env
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_NAME=${DB_NAME_HOMOLOG}
          DB_USER=${DB_USER_HOMOLOG}
          DB_PASS=${DB_PASS_HOMOLOG}
          EOF

      - name: üß™ Rodar testes PHPUnit
        run: ./vendor/bin/phpunit --testdox tests/

      - name: üõ†Ô∏è Criar flyway.conf para Homologa√ß√£o
        run: |
          cat <<EOF > flyway.conf
          flyway.url=${DB_URL_HOMOLOG}
          flyway.user=${DB_USER_HOMOLOG}
          flyway.password=${DB_PASS_HOMOLOG}
          flyway.locations=filesystem:./db/migrations
          EOF

      - name: üóÉÔ∏è Executar Flyway no banco de Homologa√ß√£o
        run: |
          wget -q https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/11.10.1/flyway-commandline-11.10.1-linux-x64.tar.gz
          tar -xzf flyway-commandline-11.10.1-linux-x64.tar.gz
          ./flyway-11.10.1/flyway -configFiles=flyway.conf migrate

      - name: üöÄ Deploy para homolog
        run: |
          find . -type f ! -name ".env" | xargs tar -czf deploy.tar.gz
          sshpass -p "$SSH_PASS_HOMOLOG" \
            scp -o StrictHostKeyChecking=no deploy.tar.gz \
            "$SSH_USER_HOMOLOG@$SSH_HOST_HOMOLOG:/var/www/homolog"
          sshpass -p "$SSH_PASS_HOMOLOG" \
            ssh -o StrictHostKeyChecking=no "$SSH_USER_HOMOLOG@$SSH_HOST_HOMOLOG" \
            "cd /var/www/homolog && tar -xzf deploy.tar.gz && rm deploy.tar.gz"

  producao:
    name: üöÄ Produ√ß√£o
    runs-on: ubuntu-latest
    needs: homolog

    env:
      DB_URL_PROD:      ${{ secrets.DB_URL_PROD }}
      DB_USER_PROD:     ${{ secrets.DB_USER_PROD }}
      DB_PASS_PROD:     ${{ secrets.DB_PASS_PROD }}
      SSH_HOST_PROD:    ${{ secrets.SSH_HOST_PROD }}
      SSH_USER_PROD:    ${{ secrets.SSH_USER_PROD }}
      SSH_PASS_PROD:    ${{ secrets.SSH_PASS_PROD }}

    steps:
      - name: üîÑ Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Instalar JRE e sshpass
        run: |
          sudo apt update
          sudo apt install -y default-jre sshpass

      - name: üõ†Ô∏è Criar flyway.conf para Produ√ß√£o
        run: |
          cat <<EOF > flyway.conf
          flyway.url=${DB_URL_PROD}
          flyway.user=${DB_USER_PROD}
          flyway.password=${DB_PASS_PROD}
          flyway.locations=filesystem:./db/migrations
          EOF

      - name: üóÉÔ∏è Executar Flyway no banco de Produ√ß√£o
        run: |
          wget -q https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/11.10.1/flyway-commandline-11.10.1-linux-x64.tar.gz
          tar -xzf flyway-commandline-11.10.1-linux-x64.tar.gz
          ./flyway-11.10.1/flyway -configFiles=flyway.conf migrate

      - name: üì¶ Deploy para produ√ß√£o
        run: |
          find . -type f ! -name ".env" | xargs tar -czf deploy.tar.gz
          sshpass -p "$SSH_PASS_PROD" \
            scp -o StrictHostKeyChecking=no deploy.tar.gz \
            "$SSH_USER_PROD@$SSH_HOST_PROD:/var/www/producao"
          sshpass -p "$SSH_PASS_PROD" \
            ssh -o StrictHostKeyChecking=no "$SSH_USER_PROD@$SSH_HOST_PROD" \
            "cd /var/www/producao && tar -xzf deploy.tar.gz && rm deploy.tar.gz"
