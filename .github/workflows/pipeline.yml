name: Pipeline PHP com Flyway (Homolog + Produção)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  homolog:
    name: 🔧 Homologação
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout do código
        uses: actions/checkout@v3

      - name: ⚙️ Instalar PHP, Composer e dependências
        run: |
          sudo apt update
          sudo apt install php php-mbstring php-xml php-mysql unzip sshpass default-jre mysql-client -y
          curl -sS https://getcomposer.org/installer | php
          php composer.phar install

      - name: ☁️ Cache do Composer
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}

      - name: ✅ Garantir execução do PHPUnit
        run: chmod +x ./vendor/bin/phpunit

      - name: 📝 Criar .env para testes
        run: |
          cat <<EOF > .env
          DB_NAME=${{ secrets.DB_NAME_HOMOLOG }}
          DB_USER=${{ secrets.DB_USER_HOMOLOG }}
          DB_PASS=${{ secrets.DB_PASS_HOMOLOG }}
          EOF

      - name: 🧪 Rodar testes PHPUnit
        run: ./vendor/bin/phpunit --testdox tests/

      - name: 🛠️ Criar flyway.conf para Homologação
        run: |
          echo "flyway.url=${{ secrets.DB_URL_HOMOLOG }}" > flyway.conf
          echo "flyway.user=${{ secrets.DB_USER_HOMOLOG }}" >> flyway.conf
          echo "flyway.password=${{ secrets.DB_PASS_HOMOLOG }}" >> flyway.conf
          echo "flyway.locations=filesystem:./db/migrations" >> flyway.conf

      - name: 🗃️ Executar Flyway no banco de Homologação
        run: |
          wget https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/11.10.1/flyway-commandline-11.10.1-linux-x64.tar.gz
          tar -xvzf flyway-commandline-11.10.1-linux-x64.tar.gz
          ./flyway-11.10.1/flyway -configFiles=flyway.conf migrate

      - name: 🚀 Deploy para /var/www/homolog via SCP (sem .env)
        run: |
          find . -type f ! -name ".env" | xargs tar -czf deploy.tar.gz
          sshpass -p "${{ secrets.SSH_PASS_HOMOLOG }}" scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ secrets.SSH_USER_HOMOLOG }}@${{ secrets.SSH_HOST_HOMOLOG }}:/var/www/homolog
          sshpass -p "${{ secrets.SSH_PASS_HOMOLOG }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER_HOMOLOG }}@${{ secrets.SSH_HOST_HOMOLOG }} "cd /var/www/homolog && tar -xzf deploy.tar.gz && rm deploy.tar.gz"

  producao:
    name: 🚀 Produção
    runs-on: ubuntu-latest
    needs: homolog

    steps:
      - name: 🔄 Checkout do código
        uses: actions/checkout@v3

      - name: 🛠️ Criar flyway.conf para Produção
        run: |
          echo "flyway.url=${{ secrets.DB_URL_PROD }}" > flyway.conf
          echo "flyway.user=${{ secrets.DB_USER_PROD }}" >> flyway.conf
          echo "flyway.password=${{ secrets.DB_PASS_PROD }}" >> flyway.conf
          echo "flyway.locations=filesystem:./db/migrations" >> flyway.conf

      - name: 🗃️ Executar Flyway no banco de Produção
        run: |
          wget https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/11.10.1/flyway-commandline-11.10.1-linux-x64.tar.gz
          tar -xvzf flyway-commandline-11.10.1-linux-x64.tar.gz
          ./flyway-11.10.1/flyway -configFiles=flyway.conf migrate

      - name: 📦 Deploy para /var/www/producao via SCP (sem .env)
        run: |
          find . -type f ! -name ".env" | xargs tar -czf deploy.tar.gz
          sshpass -p "${{ secrets.SSH_PASS_PROD }}" scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ secrets.SSH_USER_PROD }}@${{ secrets.SSH_HOST_PROD }}:/var/www/producao
          sshpass -p "${{ secrets.SSH_PASS_PROD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER_PROD }}@${{ secrets.SSH_HOST_PROD }} "cd /var/www/producao && tar -xzf deploy.tar.gz && rm deploy.tar.gz"
